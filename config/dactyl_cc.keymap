#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

// Modifiers

&kscan0 {
    debounce-press-ms = <30>;
    debounce-release-ms = <30>;
};

/ {
    behaviors {
        bsdel: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        excl_apo: excl_apo {
            compatible = "zmk,behavior-mod-morph";
            label = "!`";
            bindings = <&kp EXCLAMATION>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        apo_quot: apo_quot {
            compatible = "zmk,behavior-mod-morph";
            label = "APO_QUOT";
            bindings = <&apo>, <&qout>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hwu: hwu {
            compatible = "zmk,behavior-hold-tap";
            label = "HWU";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-while-undecided;
            tapping-term-ms = <200>;
        };
    };

    macros {
        /**
              * Temporarily switches to a layer (`&mo`) while a modifier is held.
              * Analogous to QMK's `LM()`, using a parameterized macro.
              *
              * Params:
              *  1. Layer to switch to
              *  2. Modifier to press while layer is active
              *
              * Example:
              *  `&lm NUM_LAYER LSHIFT`
              */

        infinity: infinity {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_2 &kp KP_NUMBER_3 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "INFINITY";
        };

        sqrt: sqrt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_2 &kp KP_NUMBER_5 &kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "SQRT";
        };

        apo: apo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp APOS &kp SPACE>;
            label = "APO";
        };

        qout: qout {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(APOS) &kp SPACE>;
            label = "QOUT";
        };

        modl: modl {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;

            label = "MODL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Default";
            bindings = <
&excl_apo             &kp Q  &kp W                 &kp E                  &kp R   &kp T                                           &kp Y          &kp U            &kp I             &kp O              &kp P          &kp EQUAL
&kp TAB               &kp A  &kp S                 &kp D                  &kp F   &kp G                                           &kp H          &kp J            &kp K             &kp L              &kp SEMICOLON  &apo_quot
&hwu LCTRL BACKSLASH  &kp Z  &kp X                 &kp C                  &kp V   &kp B                                           &kp N          &kp M            &kp COMMA         &kp DOT            &kp FSLH       &kp MINUS
                             &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS                                                                                          &kp LEFT_BRACKET  &kp RIGHT_BRACKET
                                                                          &bsdel  &lt 2 ENTER   &hwu LSHFT SPACE       &mo 1      &kp SPACE      &kp RIGHT_SHIFT
                                                                                  &lt 1 ESCAPE  &mt LEFT_ALT LEFT_GUI  &kp LCTRL  &modl 1 LCTRL
            >;
        };

        symbol_layer {
            bindings = <
&kp TILDE              &kp AT_SIGN  &kp HASH   &kp DOLLAR  &kp PERCENT    &kp CARET                     &kp MINUS  &kp N7  &kp N8  &kp N9      &kp RA(S)  &kp RA(Y)
&kp HOME               &kp LEFT     &kp DOWN   &kp UP      &kp RIGHT      &kp END                       &kp SPACE  &kp N4  &kp N5  &kp N6      &kp RA(P)  &kp RA(Q)
&kp RA(LS(SEMICOLON))  &kp RA(N5)   &kp PG_DN  &kp PG_UP   &kp AMPERSAND  &kp ASTERISK                  &mo 3      &kp N1  &kp N2  &kp N3      &kp F      &trans
                                    &trans     &trans                                                                      &kp N0  &kp PERIOD
                                                           &trans         &trans        &trans  &trans  &trans     &trans
                                                                          &trans        &trans  &trans  &trans
            >;
        };

        function_layer {
            bindings = <
&kp N1  &kp N2           &kp N3                &kp N4                &kp N5      &kp N6                  &kp N7        &kp N8     &kp N9     &kp N0     &trans   &trans
&kp F1  &kp F2           &kp F3                &kp F4                &kp F5      &kp F6                  &kp F7        &kp F8     &kp F9     &kp F10    &kp F11  &kp F12
&mo 3   &kp PRINTSCREEN  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp DELETE  &kp Y                   &trans        &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans   &trans
                         &sqrt                 &infinity                                                                          &trans     &trans
                                                                     &trans      &trans  &trans  &trans  &trans        &trans
                                                                                 &trans  &trans  &trans  &kp LEFT_GUI
            >;
        };

        settings {
            bindings = <
&soft_off  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &trans                      &soft_off  &trans        &trans        &trans        &trans        &trans
&trans     &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &trans                      &trans     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans
&trans     &to 4          &trans         &trans         &out OUT_TOG   &bt BT_CLR                  &trans     &trans        &trans        &trans        &trans        &bt BT_CLR
                          &sys_reset     &bootloader                                                                        &sys_reset    &bootloader
                                                        &trans         &trans      &trans  &trans  &trans     &trans
                                                                       &trans      &trans  &trans  &trans
            >;
        };

        epic_gamer_layer {
            bindings = <
&kp N1  &kp TAB           &kp Q  &kp W  &kp E   &kp R                      &trans  &trans  &trans  &trans  &trans  &trans
&kp N2  &kp LEFT_SHIFT    &kp A  &kp S  &kp D   &kp F                      &trans  &trans  &trans  &trans  &trans  &trans
&kp N3  &kp LEFT_CONTROL  &kp Z  &kp X  &kp C   &kp V                      &trans  &trans  &trans  &trans  &trans  &trans
                          &kp I  &kp M                                                     &trans  &trans
                                        &trans  &kp SPACE  &trans  &trans  &trans  &trans
                                                &trans     &trans  &trans  &to 0
            >;
        };
    };
};

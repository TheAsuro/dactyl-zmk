#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Modifiers

#define HYPER(key)   LS(LC(LA(LG(key)))) // LSHFT+LCTRL+LALT+LGUI
#define LS(LC(LA(key)))     LS(LC(LA(key))) // LSHFT+LCTRL+LALT
#define LG(LC(key))      LG(LC(key)) // LGUI+LCTRL

&kscan0 {
    debounce-press-ms = <30>;
    debounce-release-ms = <30>;
};

/ {
    behaviors {
        bsdel: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        excl_apo: excl_apo {
            compatible = "zmk,behavior-mod-morph";
            label = "!`";
            bindings = <&kp EXCLAMATION>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        /**
              * Temporarily switches to a layer (`&mo`) while a modifier is held.
              * Analogous to QMK's `LM()`, using a parameterized macro.
              *
              * Params:
              *  1. Layer to switch to
              *  2. Modifier to press while layer is active
              *
              * Example:
              *  `&lm NUM_LAYER LSHIFT`
              */
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Default";
            bindings = <
&excl_apo      &kp Q  &kp W                 &kp E                  &kp R    &kp T                                    &kp Y            &kp U   &kp I             &kp O              &kp P          &kp EQUAL
&kp TAB        &kp A  &kp S                 &kp D                  &kp F    &kp G                                    &kp H            &kp J   &kp K             &kp L              &kp SEMICOLON  &kp APOSTROPHE
&kp BACKSLASH  &kp Z  &kp X                 &kp C                  &kp V    &kp B                                    &kp N            &kp M   &kp COMMA         &kp DOT            &kp FSLH       &kp MINUS
                      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS                                                                             &kp LEFT_BRACKET  &kp RIGHT_BRACKET
                                                                   &kp ESC  &kp LEFT_SHIFT  &kp SPACE     &kp RET    &kp RIGHT_SHIFT  &bsdel
                                                                            &mo 2           &kp LEFT_ALT  &kp LCTRL  &mo 1
            >;
        };

        symbol_layer {
            bindings = <
&kp TILDE  &kp AT_SIGN  &kp HASH  &kp DOLLAR     &kp PERCENT   &kp CARET                        &trans  &kp N7  &kp N8  &kp N9      &trans     &kp RA(Y)
&trans     &trans       &kp PIPE  &kp AMPERSAND  &kp ASTERISK  &trans                           &trans  &kp N4  &kp N5  &kp N6      &kp RA(P)  &kp RA(Q)
&trans     &trans       &trans    &trans         &trans        &trans                           &kp N0  &kp N1  &kp N2  &kp N3      &trans     &trans
                        &trans    &trans                                                                        &kp N0  &kp PERIOD
                                                 &trans        &trans     &trans        &trans  &trans  &trans
                                                               &trans     &kp LEFT_GUI  &trans  &trans
            >;
        };

        movement_layer {
            bindings = <
&trans    &kp INSERT      &kp PG_DN       &kp PG_UP      &trans         &trans                   &trans    &kp INSERT          &kp PG_DN       &kp PG_UP      &trans               &trans
&kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP         &kp RIGHT      &kp END                  &kp HOME  &kp LEFT_ARROW      &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW      &kp END
&trans    &kp LC(LEFT)    &kp LA(LEFT)    &kp LA(RIGHT)  &kp LC(RIGHT)  &trans                   &trans    &kp LC(LEFT_ARROW)  &kp LA(LEFT)    &kp LA(RIGHT)  &kp LC(RIGHT_ARROW)  &trans
                          &trans          &trans                                                                               &trans          &trans
                                                         &trans         &trans   &trans  &trans  &trans    &trans
                                                                        &trans   &trans  &trans  &trans
            >;
        };
    };
};
